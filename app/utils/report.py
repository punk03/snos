import os
import random
import asyncio
import logging
from typing import Tuple, Dict, List

from telethon import TelegramClient
from telethon.errors import FloodWaitError, SessionPasswordNeededError
from telethon.tl.functions.messages import ReportRequest

import config
from app.keyboards import create_user_markup, create_back_button

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def extract_username_and_message_id(message_url: str) -> Tuple[str, int]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ URL
    
    Args:
        message_url: URL —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/username/123
    
    Returns:
        Tuple[str, int]: (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, ID —Å–æ–æ–±—â–µ–Ω–∏—è)
    
    Raises:
        ValueError: –ï—Å–ª–∏ URL –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    """
    if not message_url.startswith('https://t.me/'):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (https://t.me/XXX/YYY)")
    
    path = message_url[len('https://t.me/'):].split('/')
    if len(path) == 2:
        chat_username = path[0]
        try:
            message_id = int(path[1])
            return chat_username, message_id
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (https://t.me/XXX/YYY)")

async def report_message(bot, chat_username: str, message_id: int, user_id: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        chat_username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–±
    """
    sessions = [f.replace('.session', '') for f in os.listdir(config.SESSION_FOLDER) if f.endswith('.session')]
    
    if not sessions:
        bot.send_message(
            user_id, 
            "‚ùå *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±!*", 
            parse_mode="Markdown", 
            reply_markup=create_back_button()
        )
        return
    
    valid = 0
    ne_valid = 0
    flood = 0
    
    for session_name in sessions:
        try:
            client = TelegramClient(
                f"./{config.SESSION_FOLDER}/{session_name}", 
                int(config.API_ID), 
                config.API_HASH, 
                system_version=config.SYSTEM_VERSION
            )
            
            random_reason = random.choice(config.REPORT_REASONS)
            
            await client.connect()
            
            if not await client.is_user_authorized():
                logger.warning(f"–°–µ—Å—Å–∏—è {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                ne_valid += 1
                await client.disconnect()
                continue

            await client.start()
            chat = await client.get_entity(chat_username)

            await client(ReportRequest(
                peer=chat,
                id=[message_id],
                reason=random_reason,
                message=""
            ))
            
            valid += 1
            logger.info(f"–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é {session_name}")
            
        except FloodWaitError as e:
            flood += 1
            logger.warning(f'Flood wait error ({session_name}): {e}')
            
        except Exception as e:
            if "chat not found" in str(e):
                bot.send_message(
                    user_id, 
                    "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!*", 
                    parse_mode="Markdown", 
                    reply_markup=create_back_button()
                )
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
                return
                
            elif "object has no attribute 'from_id'" in str(e):
                bot.send_message(
                    user_id, 
                    "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!*", 
                    parse_mode="Markdown", 
                    reply_markup=create_back_button()
                )
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                return
                
            else:
                ne_valid += 1
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã ({session_name}): {e}')
                
        finally:
            try:
                await client.disconnect()
            except:
                pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        user_id, 
        f"üü© *–ñ–∞–ª–æ–±—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!*  \n\nüü¢ *–í–∞–ª–∏–¥–Ω—ã–µ:* `{valid}`  \nüî¥ *–ù–µ –≤–∞–ª–∏–¥–Ω—ã–µ:* `{ne_valid}`\n\nüåü _–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!_", 
        parse_mode="Markdown", 
        reply_markup=create_back_button()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
    user_markup = create_user_markup(user_id)
    bot.send_message(
        config.bot_logs, 
        f"‚ö°Ô∏è *–ü—Ä–æ–∏–∑–æ—à–µ–ª –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞:*\n\n*ID:* `{user_id}`\n*–°—Å—ã–ª–∫–∞: https://t.me/{chat_username}/{message_id}*\n\nüîî *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏—è—Ö:*\n‚ö°Ô∏è –í–∞–ª–∏–¥–Ω—ã–µ: *{valid}*\n‚ö°Ô∏è *–ù–µ –≤–∞–ª–∏–¥–Ω—ã–µ: {ne_valid}*\n‚ö°Ô∏è *FloodError: {flood}*", 
        parse_mode="Markdown", 
        disable_web_page_preview=True, 
        reply_markup=user_markup
    ) 