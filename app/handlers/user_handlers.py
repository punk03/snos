import asyncio
import logging
from datetime import datetime, timedelta

from telebot import TeleBot
from telebot import types

import config
from app.database import db
from app.keyboards import (
    create_main_menu,
    create_back_button,
    create_channel_button,
    create_shop_menu,
    create_payment_keyboard
)
from app.utils import (
    extract_username_and_message_id,
    report_message,
    create_invoice,
    check_payment,
    update_subscription
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
last_used = {}

def register_user_handlers(bot: TeleBot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    @bot.message_handler(commands=['start'])
    def welcome(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = message.chat.id
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
            if not db.user_exists(user_id):
                db.add_user(user_id)
                bot.send_message(
                    user_id, 
                    "üëã *–ü—Ä–∏–≤–µ—Ç!*", 
                    reply_markup=create_channel_button(), 
                    parse_mode="Markdown"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(
                user_id, 
                f'‚ô®Ô∏è *{config.bot_name}* ‚Äî _–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤._\n\n'
                f'‚ö°Ô∏è *–ê–¥–º–∏–Ω: {config.bot_admin}*\n'
                f'‚≠êÔ∏è *–û—Ç–∑—ã–≤—ã:* [Reviews]({config.bot_reviews})\n'
                f'üî• *–†–∞–±–æ—Ç—ã:* [Works]({config.bot_works})', 
                parse_mode="Markdown", 
                reply_markup=create_main_menu()
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
    
    @bot.callback_query_handler(lambda c: c.data and c.data.startswith('sub_'))
    def handle_subscription(callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user_id = callback_query.from_user.id
            
            if not db.user_exists(user_id):
                bot.send_message(
                    user_id, 
                    "*‚ùóÔ∏è –í—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start*", 
                    parse_mode="Markdown"
                )
                return
            
            subscription_type = callback_query.data.split('_')[1]
            
            try:
                invoice = create_invoice(subscription_type)
                
                sub_days, amount, _ = get_subscription_params(subscription_type)
                
                pay_url = invoice['pay_url']
                invoice_id = invoice['invoice_id']
                
                bot.edit_message_text(
                    chat_id=callback_query.message.chat.id, 
                    message_id=callback_query.message.message_id,
                    text=f'‚≠êÔ∏è *–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {config.bot_name}* ‚≠êÔ∏è\n\n'
                         f'üõí *–¢–æ–≤–∞—Ä:* *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {sub_days} –¥–Ω–µ–π*\n'
                         f'üí≥ *–¶–µ–Ω–∞:* `{amount}$`\n\n'
                         f'‚ú® *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!*',
                    parse_mode="Markdown", 
                    reply_markup=create_payment_keyboard(pay_url, invoice_id, subscription_type, sub_days)
                )
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {sub_days} –¥–Ω–µ–π")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
                bot.answer_callback_query(
                    callback_query.id, 
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    
    @bot.callback_query_handler(lambda c: c.data and c.data.startswith('check_status_'))
    def check_status_callback(callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            user_id = callback_query.from_user.id
            
            if not db.user_exists(user_id):
                bot.send_message(
                    user_id, 
                    "*‚ùóÔ∏è –í—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start*", 
                    parse_mode="Markdown"
                )
                return
            
            parts = callback_query.data.split('_')
            if len(parts) < 5:
                callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            invoice_id = parts[2]
            subscription_type = parts[3]
            sub_days = parts[4]
            
            try:
                invoice_data = check_payment(invoice_id)
                
                if invoice_data and invoice_data['status'] == "paid":
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    days = int(sub_days)
                    success = update_subscription(user_id, days)
                    
                    if success:
                        bot.edit_message_text(
                            chat_id=callback_query.message.chat.id, 
                            message_id=callback_query.message.message_id,
                            text=f'‚≠êÔ∏è *–û–ø–ª–∞—á–µ–Ω!*',
                            parse_mode="Markdown", 
                            reply_markup=create_back_button()
                        )
                        bot.send_message(
                            callback_query.message.chat.id, 
                            "‚ú® *–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.*", 
                            parse_mode="Markdown"
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
                        subscribe_date = db.get_subscription_date(user_id)
                        markup = types.InlineKeyboardMarkup(row_width=1)
                        user_button = types.InlineKeyboardButton(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}", url=f'tg://openmessage?user_id={user_id}')
                        markup.add(user_button)
                        
                        bot.send_message(
                            config.bot_logs, 
                            f'‚ö°Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å* `{user_id}` *–æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É (—Ç–µ–ø–µ—Ä—å –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ* `{subscribe_date}`*)*', 
                            parse_mode="Markdown", 
                            reply_markup=markup
                        )
                        
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {sub_days} –¥–Ω–µ–π")
                    else:
                        bot.send_message(
                            callback_query.message.chat.id, 
                            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.*", 
                            parse_mode="Markdown"
                        )
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    bot.send_message(
                        callback_query.message.chat.id, 
                        "‚ùå *–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞!*", 
                        parse_mode="Markdown"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")
                bot.send_message(
                    callback_query.message.chat.id, 
                    "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã.*", 
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    @bot.callback_query_handler(func=lambda call: True)
    def callback_inline(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
        try:
            user_id = call.from_user.id
            
            if not db.user_exists(user_id):
                bot.send_message(
                    user_id, 
                    "*‚ùóÔ∏è –í—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start*", 
                    parse_mode="Markdown"
                )
                return
            
            subscribe_date = db.get_subscription_date(user_id)
            if not subscribe_date:
                bot.send_message(
                    call.message.chat.id, 
                    "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start*", 
                    parse_mode="Markdown"
                )
                return
            
            subsribe = datetime.strptime(subscribe_date, "%Y-%m-%d %H:%M:%S")
            
            if call.message:
                if call.data == 'snoser':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    if subsribe < datetime.now():
                        bot.send_message(
                            call.message.chat.id, 
                            '‚ö°Ô∏è *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!* \n\nüíî *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.*', 
                            parse_mode="Markdown"
                        )
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
                        if user_id in last_used and (datetime.now() - last_used[user_id]) < timedelta(minutes=config.COOLDOWN_MINUTES):
                            remaining_time = timedelta(minutes=config.COOLDOWN_MINUTES) - (datetime.now() - last_used[user_id])
                            bot.edit_message_text(
                                chat_id=call.message.chat.id, 
                                message_id=call.message.message_id,
                                text=f'‚ùå *–ñ–¥–∏ {remaining_time.seconds // 60} –º–∏–Ω—É—Ç –∏ {remaining_time.seconds % 60} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±!*',
                                parse_mode="Markdown", 
                                reply_markup=create_back_button()
                            )
                            return
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        last_used[user_id] = datetime.now()
                        
                        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        x = bot.send_message(
                            call.message.chat.id, 
                            f'‚ö°Ô∏è *–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:*', 
                            parse_mode="Markdown"
                        )
                        bot.register_next_step_handler(x, botnet_step1)
                        
                elif call.data == 'back':
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    bot.edit_message_text(
                        chat_id=call.message.chat.id, 
                        message_id=call.message.message_id,
                        text=f'‚ô®Ô∏è *{config.bot_name}* ‚Äî _–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤._\n\n'
                             f'‚ö°Ô∏è *–ê–¥–º–∏–Ω: {config.bot_admin}*\n'
                             f'‚≠êÔ∏è *–û—Ç–∑—ã–≤—ã:* [Reviews]({config.bot_reviews})\n'
                             f'üî• *–†–∞–±–æ—Ç—ã:* [Works]({config.bot_works})',
                        parse_mode="Markdown", 
                        reply_markup=create_main_menu()
                    )
                    
                elif call.data == 'profile':
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    bot.edit_message_text(
                        chat_id=call.message.chat.id, 
                        message_id=call.message.message_id,
                        text=f'‚ö°Ô∏è *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* ‚ö°Ô∏è\n\n'
                             f'üÜî *ID:* `{user_id}`\n'
                             f'üïê *–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* `{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}`\n'
                             f'üí∞ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:* `{subsribe}`\n\n'
                             f'üîê _–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–æ–≤—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É!_',
                        parse_mode="Markdown", 
                        reply_markup=create_back_button()
                    )
                    
                elif call.data == 'shop':
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –ø–æ–¥–ø–∏—Å–æ–∫
                    bot.edit_message_text(
                        chat_id=call.message.chat.id, 
                        message_id=call.message.message_id, 
                        text=(f"‚ö°Ô∏è *{config.bot_name} Price List* ‚ö°Ô∏è\n\n"
                              f"üîπ *1 –¥e–Ω—å* ‚Äî `{config.subscribe_1_day}$`\n"
                              f"üîπ *7 –¥–Ω–µ–π* ‚Äî `{config.subscribe_7_days}$`\n"
                              f"üîπ *30 –¥–Ω–µ–π* ‚Äî `{config.subscribe_30_days}$`\n"
                              f"üîπ *–ù–∞–≤—Å–µ–≥–¥–∞* ‚Äî `{config.subscribe_infinity_days}$`\n\n"
                              f"üíº *–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–∞ —Ä—É–±–ª–∏: {config.bot_admin}*\n\n"
                              f"‚ö°Ô∏è *–†–∞–±–æ—Ç–∞–µ–º –±—ã—Å—Ç—Ä–æ!*"), 
                        parse_mode="Markdown", 
                        reply_markup=create_shop_menu(), 
                        disable_web_page_preview=True
                    )
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
    
    def botnet_step1(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            message_url = message.text
            user_id = message.from_user.id
            
            try:
                chat_username, message_id = extract_username_and_message_id(message_url)
                
                bot.send_message(
                    message.chat.id, 
                    '‚ö°Ô∏è *–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.*', 
                    parse_mode="Markdown"
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
                asyncio.run(report_message(bot, chat_username, message_id, user_id))
                
            except ValueError as e:
                bot.send_message(
                    message.chat.id, 
                    f'‚ö°Ô∏è *{str(e)}*', 
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ botnet_step1: {e}")
            bot.send_message(
                message.chat.id, 
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.*", 
                parse_mode="Markdown", 
                reply_markup=create_back_button()
            ) 