"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import logging
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List, Union, Callable, Tuple

from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message, CallbackQuery

import config
from app.handlers.base_handler import BaseHandler
from app.database.db import db
from app.utils.session_manager import session_manager
from app.utils.report_manager import report_manager
from app.utils.payment_manager import payment_manager
from app.utils.validators import validate_message_url
from app.utils.localization import i18n
from app.keyboards.ui_keyboards import KeyboardBuilder
from app.utils.promo_manager import promo_manager

logger = logging.getLogger(__name__)

class UserHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self, bot: AsyncTeleBot):
    """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
        super().__init__(bot)
        # –°–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        # –ö—É–ª–¥–∞—É–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
        self.cooldowns = {}
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
        self.user_report_settings = {}
        
    async def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.bot.register_message_handler(
            self.cmd_start,
            commands=['start'],
            pass_bot=True
        )
        
        self.bot.register_message_handler(
            self.cmd_profile,
            commands=['profile'],
            pass_bot=True
        )
        
        self.bot.register_message_handler(
            self.cmd_shop,
            commands=['shop'],
            pass_bot=True
        )
        
        self.bot.register_message_handler(
            self.cmd_help,
            commands=['help'],
            pass_bot=True
        )
        
        self.bot.register_message_handler(
            self.cmd_settings,
            commands=['settings'],
            pass_bot=True
        )
        
        self.bot.register_message_handler(
            self.cmd_stats,
            commands=['stats'],
            pass_bot=True
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è BotNet)
        self.bot.register_message_handler(
            self.process_message,
            content_types=['text'],
            pass_bot=True
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.bot.register_callback_query_handler(
            self.process_callback_wrapper,
            func=lambda call: True,
            pass_bot=True
        )
        
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    async def process_callback_wrapper(self, call: CallbackQuery, bot: AsyncTeleBot):
        """
        –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö callback
        handlers = {
            'profile': self.cb_profile,
            'shop': self.cb_shop,
            'back': self.cb_back,
            'snoser': self.cb_botnet,
            'stats': self.cb_stats,
            'settings': self.cb_settings,
            'settings_language': self.cb_language,
            'lang_': self.cb_set_language,
            'sub_': self.cb_subscription,
            'check_status_': self.cb_check_payment,
            'user_stats': self.cb_user_stats,
            'report_reason_': self.cb_report_reason,
            'intensity_': self.cb_report_intensity,
            'cancel_operation': self.cb_cancel_operation
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
        await self.process_callback(call, handlers)
    
    async def cmd_start(self, message: Message, bot: AsyncTeleBot):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.check_user(user_id, message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        await self.log_command(user_id, 'start')
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.safe_send_message(
            chat_id=user_id,
            text=i18n.get_text("welcome", lang, name=config.bot_name),
                    parse_mode="Markdown"
                )
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.safe_send_message(
            chat_id=user_id,
            text=f"‚ô®Ô∏è *{config.bot_name}* ‚Äî _–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è._\n\n‚ö°Ô∏è *–ê–¥–º–∏–Ω: {config.bot_admin}*\n‚≠êÔ∏è *–û—Ç–∑—ã–≤—ã:* [Reviews]({config.bot_reviews})\nüî• *–†–∞–±–æ—Ç—ã:* [Works]({config.bot_works})",
            parse_mode="Markdown",
            reply_markup=KeyboardBuilder.main_menu(),
            disable_web_page_preview=True
        )
    
    async def cmd_profile(self, message: Message, bot: AsyncTeleBot):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.check_user(user_id, message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        await self.log_command(user_id, 'profile')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        await self.show_profile(user_id)
    
    async def cmd_shop(self, message: Message, bot: AsyncTeleBot):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.check_user(user_id, message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        await self.log_command(user_id, 'shop')
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
        await self.safe_send_message(
            chat_id=user_id,
            text=i18n.get_text("shop_title", lang),
                parse_mode="Markdown", 
            reply_markup=KeyboardBuilder.shop_menu()
        )
    
    async def cmd_help(self, message: Message, bot: AsyncTeleBot):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.check_user(user_id, message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        await self.log_command(user_id, 'help')
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
        help_text = f"""*üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

1Ô∏è‚É£ *–ß—Ç–æ —Ç–∞–∫–æ–µ {config.bot_name}?*
_{config.bot_name}_ - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö –∂–∞–ª–æ–± –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.

2Ô∏è‚É£ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?*
‚Ä¢ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–∞–≥–∞–∑–∏–Ω"
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "BotNet"
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `https://t.me/username/123`
‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

3Ô∏è‚É£ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
/shop - –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–ø–∏—Å–æ–∫
/help - –°–ø—Ä–∞–≤–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

*–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:* {config.bot_admin}

*üìú –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:* [Documentation]({config.bot_documentation})
"""
        
        await self.safe_send_message(
            chat_id=user_id,
            text=help_text,
            parse_mode="Markdown",
            disable_web_page_preview=True,
            reply_markup=KeyboardBuilder.back_button()
        )
    
    async def cmd_settings(self, message: Message, bot: AsyncTeleBot):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.check_user(user_id, message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        await self.log_command(user_id, 'settings')
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await self.safe_send_message(
            chat_id=user_id,
            text=i18n.get_text("settings_title", lang),
            parse_mode="Markdown",
            reply_markup=KeyboardBuilder.settings_menu()
        )
    
    async def cmd_stats(self, message: Message, bot: AsyncTeleBot):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.check_user(user_id, message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        await self.log_command(user_id, 'stats')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await self.show_user_stats(user_id)
    
    async def process_message(self, message: Message, bot: AsyncTeleBot):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        user_id = message.from_user.id
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await self.check_user(user_id, message, update_info=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self.user_states.get(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not user_state:
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ BotNet
        if user_state == "botnet":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (–ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã)
            has_access, error_message = await self.check_payment_system(user_id)
            if not has_access:
                await self.safe_send_message(
                    chat_id=user_id,
                    text=error_message,
                    parse_mode="Markdown"
                )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.user_states.pop(user_id, None)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            cooldown = self.cooldowns.get(user_id)
            if cooldown and cooldown > datetime.now():
                # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                minutes_left = int((cooldown - datetime.now()).total_seconds() // 60) + 1
                await self.safe_send_message(
                    chat_id=user_id,
                    text=i18n.get_text("botnet_cooldown", lang, minutes_left),
                    parse_mode="Markdown",
                    reply_markup=KeyboardBuilder.back_button()
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É
            is_valid, message_info = validate_message_url(message.text)
            if not is_valid:
                await self.safe_send_message(
                    chat_id=user_id,
                    text=i18n.get_text("botnet_invalid_url", lang),
                    parse_mode="Markdown"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            processing_msg = await self.safe_send_message(
                chat_id=user_id,
                text=i18n.get_text("botnet_processing", lang),
                parse_mode="Markdown",
                reply_markup=KeyboardBuilder.cancel_operation_button()
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_settings = self.user_report_settings.get(user_id, {})
            report_reason = user_settings.get("reason")
            max_sessions = user_settings.get("max_sessions")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
            stats = await report_manager.report_message(
                message_url=message.text,
                user_id=user_id,
                bot=self.bot,
                message_id=processing_msg.message_id,
                report_reason=report_reason,
                max_sessions=max_sessions
            )
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Å–ø–∏—Å—ã–≤–∞–µ–º 1 —Å–Ω–æ—Å
            is_promo_only_mode = promo_manager.is_promo_only_mode()
            if is_promo_only_mode:
                # –°–ø–∏—Å—ã–≤–∞–µ–º 1 —Å–Ω–æ—Å —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                promo_manager.use_reports(user_id, 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if stats.get("error"):
                error_code = stats.get("error")
                
                if error_code == "invalid_url":
                    await self.safe_edit_message(
                        chat_id=user_id,
                        message_id=processing_msg.message_id,
                        text=i18n.get_text("botnet_invalid_url", lang),
                        parse_mode="Markdown",
                        reply_markup=KeyboardBuilder.back_button()
                    )
                elif error_code == "no_sessions":
                    await self.safe_edit_message(
                        chat_id=user_id,
                        message_id=processing_msg.message_id,
                        text=i18n.get_text("botnet_no_sessions", lang),
                        parse_mode="Markdown",
                        reply_markup=KeyboardBuilder.back_button()
                    )
                else:
                    await self.safe_edit_message(
                        chat_id=user_id,
                        message_id=processing_msg.message_id,
                        text=i18n.get_text("botnet_error", lang),
                        parse_mode="Markdown",
                        reply_markup=KeyboardBuilder.back_button()
                    )
            else:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cooldown_minutes = config.COOLDOWN_MINUTES
                self.cooldowns[user_id] = datetime.now() + timedelta(minutes=cooldown_minutes)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                valid_reports = stats.get("valid", 0)
                invalid_reports = stats.get("invalid", 0)
                flood_reports = stats.get("flood", 0)
                total_reports = stats.get("total", 0)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db.log_operation(
                    user_id=user_id,
                    operation_type="botnet_report",
                    target=message.text,
                    result=json.dumps(stats)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot_result_text = i18n.get_text("botnet_result", lang, valid_reports, invalid_reports, flood_reports, total_reports)
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–Ω–æ—Å–∞—Ö
                if is_promo_only_mode:
                    reports_left = promo_manager.check_reports_left(user_id)
                    bot_result_text += "\n\n" + i18n.get_text("botnet_reports_left", lang, reports_left)
                
                await self.safe_edit_message(
                    chat_id=user_id,
                    message_id=processing_msg.message_id,
                    text=bot_result_text,
                    parse_mode="Markdown",
                    reply_markup=KeyboardBuilder.back_button()
                )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_states.pop(user_id, None)
    
    async def cb_profile(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await self.show_profile(user_id)
    
    async def cb_shop(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã
        is_payment_disabled = promo_manager.is_payment_disabled()
        
        if is_payment_disabled:
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.safe_edit_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=i18n.get_text("payment_disabled", lang),
                parse_mode="Markdown",
                reply_markup=KeyboardBuilder.back_button()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
        await self.safe_edit_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=i18n.get_text("shop_title", lang),
            parse_mode="Markdown",
            reply_markup=KeyboardBuilder.shop_menu()
        )
    
    async def cb_back(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states.pop(user_id, None)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.safe_edit_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚ô®Ô∏è *{config.bot_name}* ‚Äî _–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è._\n\n‚ö°Ô∏è *–ê–¥–º–∏–Ω: {config.bot_admin}*\n‚≠êÔ∏è *–û—Ç–∑—ã–≤—ã:* [Reviews]({config.bot_reviews})\nüî• *–†–∞–±–æ—Ç—ã:* [Works]({config.bot_works})",
            parse_mode="Markdown",
            reply_markup=KeyboardBuilder.main_menu(),
            disable_web_page_preview=True
        )
    
    async def cb_botnet(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è BotNet
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_date = db.get_subscription_date(user_id)
        if not subscription_date or datetime.strptime(subscription_date, "%Y-%m-%d %H:%M:%S") < datetime.now():
            await self.safe_edit_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=i18n.get_text("botnet_no_subscription", lang),
                parse_mode="Markdown",
                reply_markup=KeyboardBuilder.shop_menu()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        cooldown = self.cooldowns.get(user_id)
        if cooldown and cooldown > datetime.now():
            # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            minutes_left = int((cooldown - datetime.now()).total_seconds() // 60) + 1
            await self.safe_edit_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=i18n.get_text("botnet_cooldown", lang, minutes_left),
                            parse_mode="Markdown", 
                reply_markup=KeyboardBuilder.back_button()
            )
            return
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã
        await self.safe_edit_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=i18n.get_text("botnet_reason_title", lang),
            parse_mode="Markdown",
            reply_markup=KeyboardBuilder.report_reasons_menu()
        )
    
    async def cb_report_reason(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
        reason = call.data.replace("report_reason_", "")
        
        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏—á–∏–Ω –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        reason_names = config.REPORT_REASON_NAMES
        
        # –ï—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None (–±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–æ)
        if reason == "random":
            self.user_report_settings[user_id] = {"reason": None}
        else:
            self.user_report_settings[user_id] = {"reason": reason}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
        await self.safe_edit_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=i18n.get_text("botnet_reason_selected", lang, reason_names.get(reason, reason)),
                            parse_mode="Markdown", 
            reply_markup=KeyboardBuilder.report_intensity_menu()
        )
    
    async def cb_report_intensity(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        intensity = call.data.replace("intensity_", "")
        
        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        intensity_names = {
            "max": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è",
            "high": "–í—ã—Å–æ–∫–∞—è",
            "medium": "–°—Ä–µ–¥–Ω—è—è",
            "low": "–ù–∏–∑–∫–∞—è"
        }
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
        if user_id not in self.user_report_settings:
            self.user_report_settings[user_id] = {}
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        intensity_value = config.REPORT_INTENSITY_LEVELS.get(intensity)
        if intensity_value is None or intensity_value == 1.0:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å - –≤—Å–µ —Å–µ—Å—Å–∏–∏
            self.user_report_settings[user_id]["max_sessions"] = None
                    else:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
            valid_sessions = await session_manager.get_valid_sessions()
            total_sessions = len(valid_sessions)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            max_sessions = int(total_sessions * intensity_value)
            self.user_report_settings[user_id]["max_sessions"] = max_sessions
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = "botnet"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await self.safe_edit_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=i18n.get_text("botnet_intensity_selected", lang, intensity_names.get(intensity, intensity)),
            parse_mode="Markdown",
            reply_markup=KeyboardBuilder.back_button()
        )
    
    async def cb_cancel_operation(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
        success = await report_manager.cancel_report(user_id)
        
        if success:
            # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞
            await self.safe_edit_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=i18n.get_text("botnet_cancel_success", lang),
                parse_mode="Markdown",
                reply_markup=KeyboardBuilder.back_button()
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.user_states.pop(user_id, None)
            self.user_report_settings.pop(user_id, {})
                else:
            # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            await self.bot.answer_callback_query(
                call.id,
                text=i18n.get_text("botnet_cancel_error", lang),
                show_alert=True
            )
    
    async def cb_stats(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await self.show_user_stats(user_id, call.message.message_id)
    
    async def cb_settings(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.safe_edit_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=i18n.get_text("settings_title", lang),
            parse_mode="Markdown",
            reply_markup=KeyboardBuilder.settings_menu()
        )
    
    async def cb_language(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        await self.safe_edit_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=i18n.get_text("language_title", lang),
            parse_mode="Markdown",
            reply_markup=KeyboardBuilder.language_menu()
        )
    
    async def cb_set_language(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        lang_code = call.data.split('_')[1]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        i18n.set_user_language(user_id, lang_code)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —è–∑—ã–∫
        lang = i18n.get_user_language(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        await self.safe_edit_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=i18n.get_text("language_changed", lang),
            parse_mode="Markdown",
            reply_markup=KeyboardBuilder.settings_menu()
        )
    
    async def cb_subscription(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
            user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_type = call.data.split('_')[1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if subscription_type == "1":
            sub_days = "1"
            amount = config.subscribe_1_day
        elif subscription_type == "2":
            sub_days = "7"
            amount = config.subscribe_7_days
        elif subscription_type == "3":
            sub_days = "14"
            amount = config.subscribe_14_days
        elif subscription_type == "4":
            sub_days = "30"
            amount = config.subscribe_30_days
        elif subscription_type == "5":
            sub_days = "365"
            amount = config.subscribe_365_days
        elif subscription_type == "6":
            sub_days = "3500"  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            amount = config.subscribe_infinity_days
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
            await self.bot.answer_callback_query(
                call.id,
                text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        if payment_manager:
            invoice = payment_manager.create_invoice(amount=amount, asset='USDT')
            
            if invoice.get("error"):
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞
                await self.safe_edit_message(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=i18n.get_text("error", lang, invoice["error"]),
                    parse_mode="Markdown",
                    reply_markup=KeyboardBuilder.back_button()
                )
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞
            pay_url = invoice['pay_url']
            invoice_id = invoice['invoice_id']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
            await self.safe_edit_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=i18n.get_text("payment_title", lang, sub_days, amount),
                parse_mode="Markdown",
                reply_markup=KeyboardBuilder.payment_keyboard(
                    pay_url=pay_url,
                    invoice_id=invoice_id,
                    subscription_type=subscription_type,
                    sub_days=sub_days
                )
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
            db.log_operation(
                user_id=user_id,
                operation_type="create_invoice",
                target=f"sub_{subscription_type}",
                params=json.dumps({
                    "amount": amount,
                    "days": sub_days,
                    "invoice_id": invoice_id
                })
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            db.record_payment(
                user_id=user_id,
                invoice_id=str(invoice_id),
                amount=amount,
                currency="USDT",
                status="pending",
                subscription_days=int(sub_days)
                        )
                    else:
            # –°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            await self.safe_edit_message(
                                chat_id=call.message.chat.id, 
                                message_id=call.message.message_id,
                text=i18n.get_text("error", lang, "–°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"),
                                parse_mode="Markdown", 
                reply_markup=KeyboardBuilder.back_button()
            )
    
    async def cb_check_payment(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        parts = call.data.split('_')
        if len(parts) < 5:
            await self.bot.answer_callback_query(
                call.id,
                text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
                            )
                            return
                        
        invoice_id = parts[2]
        subscription_type = parts[3]
        sub_days = parts[4]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        await self.safe_edit_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=i18n.get_text("payment_checking", lang),
                            parse_mode="Markdown"
                        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
        if payment_manager:
            is_paid, invoice_data = payment_manager.check_invoice(int(invoice_id))
            
            if is_paid:
                # –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                new_date = payment_manager.calculate_subscription_end_date(int(sub_days))
                db.update_subscription(user_id, new_date)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                db.update_payment_status(invoice_id, "paid")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
                db.log_operation(
                    user_id=user_id,
                    operation_type="payment_success",
                    target=invoice_id,
                    result=new_date
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                await self.safe_edit_message(
                        chat_id=call.message.chat.id, 
                        message_id=call.message.message_id,
                    text=i18n.get_text("payment_success", lang, new_date),
                        parse_mode="Markdown", 
                    reply_markup=KeyboardBuilder.main_menu()
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
                await self.safe_edit_message(
                        chat_id=call.message.chat.id, 
                        message_id=call.message.message_id,
                    text=i18n.get_text("payment_error", lang),
                        parse_mode="Markdown", 
                    reply_markup=KeyboardBuilder.payment_keyboard(
                        pay_url=invoice_data.get('pay_url', '#') if invoice_data else '#',
                        invoice_id=invoice_id,
                        subscription_type=subscription_type,
                        sub_days=sub_days
                    )
                )
        else:
            # –°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            await self.safe_edit_message(
                        chat_id=call.message.chat.id, 
                        message_id=call.message.message_id, 
                text=i18n.get_text("error", lang, "–°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"),
                        parse_mode="Markdown", 
                reply_markup=KeyboardBuilder.back_button()
            )
    
    async def cb_user_stats(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            call: –û–±—ä–µ–∫—Ç callback
        """
        user_id = call.from_user.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await self.show_user_stats(user_id, call.message.message_id)
    
    async def show_profile(self, user_id: int, message_id: Optional[int] = None):
        """
        –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = db.get_user(user_id)
        
        if not user_data:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            db.add_user(user_id)
            user_data = db.get_user(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = user_data.get("first_name", "")
        if user_data.get("last_name"):
            user_name += f" {user_data['last_name']}"
        if not user_name and user_data.get("username"):
            user_name = f"@{user_data['username']}"
        if not user_name:
            user_name = str(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_date = user_data.get("subscribe_date")
        is_active = False
        
        if subscription_date:
            try:
                sub_date = datetime.strptime(subscription_date, "%Y-%m-%d %H:%M:%S")
                is_active = sub_date > datetime.now()
            except:
                pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        status = i18n.get_text("active_subscribe", lang) if is_active else i18n.get_text("inactive_subscribe", lang)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = i18n.get_text("profile", lang, 
                                    user_id, user_name, subscription_date, status)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        if is_active:
            profile_text += "\n\n" + i18n.get_text("subscribe_active", lang, subscription_date)
        else:
            profile_text += "\n\n" + i18n.get_text("subscribe_inactive", lang)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_id:
            await self.safe_edit_message(
                chat_id=user_id,
                message_id=message_id,
                text=profile_text,
                parse_mode="Markdown",
                reply_markup=KeyboardBuilder.user_profile_menu(is_active)
            )
        else:
            await self.safe_send_message(
                chat_id=user_id,
                text=profile_text,
                parse_mode="Markdown",
                reply_markup=KeyboardBuilder.user_profile_menu(is_active)
            )
    
    async def show_user_stats(self, user_id: int, message_id: Optional[int] = None):
        """
        –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = db.get_user(user_id)
        
        if not user_data:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
        conn = db.pool.get_connection()
        stats = {"views": 0, "reports": 0, "success": 0, "last_activity": user_data.get("last_activity", "")}
        
        if conn:
            try:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                cursor.execute(
                    """
                    SELECT COUNT(*) FROM operations 
                    WHERE user_id = ? AND operation_type = 'command'
                    """,
                    (user_id,)
                )
                result = cursor.fetchone()
                stats["views"] = result[0] if result else 0
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±
                cursor.execute(
                    """
                    SELECT COUNT(*) FROM operations 
                    WHERE user_id = ? AND operation_type = 'report'
                    """,
                    (user_id,)
                )
                result = cursor.fetchone()
                stats["reports"] = result[0] if result else 0
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∂–∞–ª–æ–±
                cursor.execute(
                    """
                    SELECT result FROM operations 
                    WHERE user_id = ? AND operation_type = 'report_result'
                    """,
                    (user_id,)
                )
                results = cursor.fetchall()
                
                for row in results:
                    try:
                        result_data = json.loads(row[0])
                        stats["success"] += result_data.get("valid", 0)
                    except:
                        pass
                
        except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            finally:
                db.pool.release_connection(conn)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = i18n.get_text("stats_title", lang, 
                                  stats["views"], stats["reports"], 
                                  stats["success"], stats["last_activity"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_id:
            await self.safe_edit_message(
                chat_id=user_id,
                message_id=message_id,
                text=stats_text,
                parse_mode="Markdown",
                reply_markup=KeyboardBuilder.back_button()
            )
        else:
            await self.safe_send_message(
                chat_id=user_id,
                text=stats_text,
                parse_mode="Markdown", 
                reply_markup=KeyboardBuilder.back_button()
            )

    async def check_user_subscription(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_date = db.get_subscription_date(user_id)
        if not subscription_date:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        try:
            sub_date = datetime.strptime(subscription_date, "%Y-%m-%d %H:%M:%S")
            return sub_date > datetime.now()
        except:
            return False

    async def check_payment_system(self, user_id: int) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[bool, Optional[str]]: (–ï—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø, –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = i18n.get_user_language(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—ã
        is_promo_only_mode = promo_manager.is_promo_only_mode()
        
        if is_promo_only_mode:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–Ω–æ—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reports_left = promo_manager.check_reports_left(user_id)
            
            if reports_left <= 0:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–Ω–æ—Å–æ–≤
                return False, i18n.get_text("botnet_no_reports_left", lang)
            
            return True, None
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
            has_subscription = await self.check_user_subscription(user_id)
            if not has_subscription:
                return False, i18n.get_text("botnet_no_subscription", lang)
            
            return True, None 