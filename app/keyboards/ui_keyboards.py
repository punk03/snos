"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –µ–¥–∏–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
"""
import logging
from typing import List, Dict, Any, Optional, Union, Tuple

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telebot.types import KeyboardButton

import config

logger = logging.getLogger(__name__)

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
ICONS = {
    "profile": "üë§",
    "help": "üìö",
    "info": "‚ÑπÔ∏è",
    "shop": "üõí",
    "settings": "‚öôÔ∏è",
    "bot": "ü§ñ",
    "channel": "üì¢",
    "stats": "üìä",
    "admin": "üëë",
    "back": "‚óÄÔ∏è",
    "next": "‚ñ∂Ô∏è",
    "up": "üîº",
    "down": "üîΩ",
    "plus": "‚ûï",
    "minus": "‚ûñ",
    "check": "‚úÖ",
    "cross": "‚ùå",
    "warning": "‚ö†Ô∏è",
    "money": "üí∞",
    "pay": "üí≥",
    "time": "‚è±",
    "premium": "‚≠êÔ∏è",
    "ok": "‚úì",
    "link": "üîó",
    "report": "üö®",
    "success": "üü¢",
    "error": "üî¥",
    "neutral": "‚ö™Ô∏è",
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
UI_SETTINGS = {
    "row_width": 2,  # –®–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    "button_prefix": "",  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞)
    "button_suffix": "",  # –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫
}

class KeyboardBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –µ–¥–∏–Ω—ã–º —Å—Ç–∏–ª–µ–º"""
    
    @staticmethod
    def create_inline_keyboard(
        buttons: List[Dict[str, Any]], 
        row_width: int = UI_SETTINGS["row_width"]
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–Ω–æ–ø–æ–∫
                - text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                - callback_data: –î–∞–Ω–Ω—ã–µ callback (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                - url: URL –¥–ª—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                - icon: –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            row_width: –®–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            
        Returns:
            InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        markup = InlineKeyboardMarkup(row_width=row_width)
        
        keyboard_buttons = []
        for button in buttons:
            text = button.get("text", "")
            callback_data = button.get("callback_data")
            url = button.get("url")
            icon = button.get("icon")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if icon and icon in ICONS:
                text = f"{ICONS[icon]} {text}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if url:
                keyboard_buttons.append(InlineKeyboardButton(
                    text=f"{UI_SETTINGS['button_prefix']}{text}{UI_SETTINGS['button_suffix']}", 
                    url=url
                ))
            elif callback_data:
                keyboard_buttons.append(InlineKeyboardButton(
                    text=f"{UI_SETTINGS['button_prefix']}{text}{UI_SETTINGS['button_suffix']}", 
                    callback_data=callback_data
                ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup.add(*keyboard_buttons)
        return markup
    
    @staticmethod
    def create_reply_keyboard(
        buttons: List[Union[str, Dict[str, Any]]],
        row_width: int = UI_SETTINGS["row_width"],
        resize_keyboard: bool = True,
        one_time_keyboard: bool = False,
        selective: bool = False
    ) -> ReplyKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–Ω–æ–ø–æ–∫
                - text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                - request_contact: –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                - request_location: –ó–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                - icon: –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            row_width: –®–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            resize_keyboard: –ü–æ–¥–≥–æ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ —ç–∫—Ä–∞–Ω
            one_time_keyboard: –°–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            selective: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            
        Returns:
            ReplyKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        markup = ReplyKeyboardMarkup(
            row_width=row_width,
            resize_keyboard=resize_keyboard,
            one_time_keyboard=one_time_keyboard,
            selective=selective
        )
        
        keyboard_buttons = []
        for button in buttons:
            if isinstance(button, str):
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
                keyboard_buttons.append(KeyboardButton(button))
            else:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                text = button.get("text", "")
                request_contact = button.get("request_contact", False)
                request_location = button.get("request_location", False)
                icon = button.get("icon")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
                if icon and icon in ICONS:
                    text = f"{ICONS[icon]} {text}"
                
                keyboard_buttons.append(KeyboardButton(
                    text=text,
                    request_contact=request_contact,
                    request_location=request_location
                ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup.add(*keyboard_buttons)
        return markup
    
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞"""
        buttons = [
            {"text": "–ü—Ä–æ—Ñ–∏–ª—å", "callback_data": "profile", "icon": "profile"},
            {"text": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "url": config.bot_documentation, "icon": "help"},
            {"text": "–ú–∞–≥–∞–∑–∏–Ω", "callback_data": "shop", "icon": "shop"},
            {"text": "BotNet", "callback_data": "snoser", "icon": "bot"},
            {"text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats", "icon": "stats"},
            {"text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings", "icon": "settings"},
            {"text": "–ö–∞–Ω–∞–ª", "url": config.bot_channel_link, "icon": "channel"},
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=2)
    
    @staticmethod
    def back_button() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
        buttons = [
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "back", "icon": "back"},
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons)
    
    @staticmethod
    def shop_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        buttons = [
            {"text": f"1 –¥–µ–Ω—å - {config.subscribe_1_day}$", "callback_data": "sub_1", "icon": "premium"},
            {"text": f"7 –¥–Ω–µ–π - {config.subscribe_7_days}$", "callback_data": "sub_2", "icon": "premium"},
            {"text": f"30 –¥–Ω–µ–π - {config.subscribe_30_days}$", "callback_data": "sub_4", "icon": "premium"},
            {"text": f"–ù–∞–≤—Å–µ–≥–¥–∞ - {config.subscribe_infinity_days}$", "callback_data": "sub_6", "icon": "premium"},
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "back", "icon": "back"},
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=2)
    
    @staticmethod
    def admin_menu(admin_level: int) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            admin_level: –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        """
        buttons = []
        
        # –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å (—É—Ä–æ–≤–µ–Ω—å 1) –∏ –≤—ã—à–µ
        if admin_level >= config.ADMIN_LEVEL_OBSERVER:
            buttons.extend([
                {"text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats", "icon": "stats"},
                {"text": "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "callback_data": "admin_users", "icon": "profile"},
                {"text": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π", "callback_data": "admin_sessions", "icon": "check"},
            ])
        
        # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä (—É—Ä–æ–≤–µ–Ω—å 2) –∏ –≤—ã—à–µ
        if admin_level >= config.ADMIN_LEVEL_MODERATOR:
            buttons.extend([
                {"text": "–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "add_subsribe", "icon": "plus"},
                {"text": "–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "clear_subscribe", "icon": "minus"},
                {"text": "–ü—Ä–æ–º–æ–∫–æ–¥—ã", "callback_data": "admin_promos", "icon": "gift"},
            ])
        
        # –ü–æ–ª–Ω—ã–π –∞–¥–º–∏–Ω (—É—Ä–æ–≤–µ–Ω—å 3)
        if admin_level >= config.ADMIN_LEVEL_FULL:
            buttons.extend([
                {"text": "–†–∞—Å—Å—ã–ª–∫–∞", "callback_data": "send_all", "icon": "channel"},
                {"text": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", "callback_data": "admin_manage", "icon": "admin"},
                {"text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", "callback_data": "admin_settings", "icon": "settings"},
            ])
            
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons.append({"text": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back", "icon": "back"})
        
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=2)
    
    @staticmethod
    def payment_keyboard(pay_url: str, invoice_id: str, subscription_type: str, sub_days: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
        
        Args:
            pay_url: URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
            invoice_id: ID –∏–Ω–≤–æ–π—Å–∞
            subscription_type: –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
            sub_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        """
        buttons = [
            {"text": "–û–ø–ª–∞—Ç–∏—Ç—å", "url": pay_url, "icon": "pay"},
            {"text": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "callback_data": f"check_status_{invoice_id}_{subscription_type}_{sub_days}", "icon": "check"},
            {"text": "–û—Ç–º–µ–Ω–∞", "callback_data": "back", "icon": "cross"},
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=2)
    
    @staticmethod
    def user_profile_menu(subscribe_active: bool = False) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            subscribe_active: –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        """
        buttons = [
            {"text": "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "user_stats", "icon": "stats"},
        ]
        
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
        if not subscribe_active:
            buttons.append({"text": "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "shop", "icon": "shop"})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append({"text": "–ù–∞–∑–∞–¥", "callback_data": "back", "icon": "back"})
        
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
    
    @staticmethod
    def settings_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        buttons = [
            {"text": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "callback_data": "settings_notifications", "icon": "info"},
            {"text": "–Ø–∑—ã–∫", "callback_data": "settings_language", "icon": "settings"},
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "back", "icon": "back"},
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=2)
    
    @staticmethod
    def session_status_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–π"""
        buttons = [
            {"text": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏–∏", "callback_data": "check_sessions", "icon": "check"},
            {"text": "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "callback_data": "sessions_stats", "icon": "stats"},
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "back", "icon": "back"},
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
    
    @staticmethod
    def language_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        buttons = [
            {"text": "–†—É—Å—Å–∫–∏–π üá∑üá∫", "callback_data": "lang_ru"},
            {"text": "English üá¨üáß", "callback_data": "lang_en"},
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "back", "icon": "back"},
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=2)
        
    @staticmethod
    def report_reasons_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã"""
        buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏—á–∏–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for reason, name in config.REPORT_REASON_NAMES.items():
            buttons.append({
                "text": name,
                "callback_data": f"report_reason_{reason}",
                "icon": "warning"
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–ª—É—á–∞–π–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã
        buttons.append({
            "text": "–°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞",
            "callback_data": "report_reason_random",
            "icon": "warning"
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append({
            "text": "–ù–∞–∑–∞–¥",
            "callback_data": "back",
            "icon": "back"
        })
        
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=2)
        
    @staticmethod
    def report_intensity_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±"""
        buttons = [
            {"text": "üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è (–≤—Å–µ —Å–µ—Å—Å–∏–∏)", "callback_data": "intensity_max"},
            {"text": "‚ö° –í—ã—Å–æ–∫–∞—è (75% —Å–µ—Å—Å–∏–π)", "callback_data": "intensity_high"},
            {"text": "‚öôÔ∏è –°—Ä–µ–¥–Ω—è—è (50% —Å–µ—Å—Å–∏–π)", "callback_data": "intensity_medium"},
            {"text": "üîã –ù–∏–∑–∫–∞—è (25% —Å–µ—Å—Å–∏–π)", "callback_data": "intensity_low"},
            {"text": "–ù–∞–∑–∞–¥", "callback_data": "back", "icon": "back"},
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=1)
        
    @staticmethod
    def cancel_operation_button() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        buttons = [
            {"text": "–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", "callback_data": "cancel_operation", "icon": "cross"},
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, row_width=1) 